// ### 45 2018年9月27日

// 给定一个集合，如 {3, 4, 5, -3, 100, 1, 89, 54, 23, 20},将它分成两个子集，每个是它的一半大小。 如果集合元素是奇数，那么有一个自己会比另一个子集大1。

// 集合用数组S表示，写一个方法`tug(S)`，使得S切分成两个子集后，两个子集元素和的差值（绝对值）最小。 

// 比如{3, 4, 5, -3, 100, 1, 89, 54, 23, 20}可以拆分成 {4, 100, 1, 23, 20}和{3, 5, -3, 89, 54}，和分别是148，148,差值为0。 

// {23, 45, -34, 12, 0, 98, -99, 4, 189, -1, 4}可以拆分成{45, -34, 12, 98, -1}和{23, 0, -99, 4, 189, 4}，和分别是120和121，差值为1。

// 示例：
// ```
// tug([23, 45, -34, 12, 0, 98, -99, 4, 189, -1, 4])
// // [ [45 ,-34, 12 ,98 ,-1], [23, 0, -99, 4, 189 ,4] ]
// ```

// 提示：见tips.md
let S = [23, 45, -34, 12, 0, 98, -99, 4, 189, -1, 4];
let S2 = [3, 4, 5, -3, 100, 1, 89, 54, 23, 20];
function sum(S){
    return S.reduce((a,b)=>a+b);
}
function*subsets(S,len){
    for(let i = 1; i< 1<<S.length; i++){
        let s1 = [];
        let s2 = [];
        for(let k = 0; k < S.length; k++){
            const take = i & 1<<k;
            take ? s1.push(S[k]) : s2.push(S[k]);
        }
        if(s1.length === len){
            yield {
                value: Math.abs(sum(s1)-sum(s2)),
                arr: [s1,s2]
            }
        }
    }
}

function tug(S){ // 首先拆分为求子集的问题在 S中取一半长度的子集
    let len = ~~(S.length/2);
    let childMap = [...subsets(S,len)];
    return childMap.sort((a,b)=>a.value-b.value)[0]['arr'];
}
console.log(tug(S)) // [ [ 45, -34, 12, 98, -1 ], [ 23, 0, -99, 4, 189, 4 ] ]
console.log(tug(S2)) // [ [ 3, 5, -3, 89, 54 ], [ 4, 100, 1, 23, 20 ] ]
